# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cobaltspeech.sentimo.v1 import sentimo_pb2 as cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2


class SentimoServiceStub(object):
    """Service that implements the Cobalt Sentimo Speech Processing API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.sentimo.v1.SentimoService/Version',
                request_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionResponse.FromString,
                _registered_method=True)
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.sentimo.v1.SentimoService/ListModels',
                request_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.StreamingRecognize = channel.stream_stream(
                '/cobaltspeech.sentimo.v1.SentimoService/StreamingRecognize',
                request_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeRequest.SerializeToString,
                response_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeResponse.FromString,
                _registered_method=True)


class SentimoServiceServicer(object):
    """Service that implements the Cobalt Sentimo Speech Processing API.
    """

    def Version(self, request, context):
        """Queries the version of the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """Retrieves a list of available sentimo models.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRecognize(self, request_iterator, context):
        """Performs bidirectional streaming for recognizing speech and sentiment by
        receiving results while sending audio. This method is only available via
        GRPC and not via HTTP+JSON. However, a web browser may use websockets to
        use this service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SentimoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionRequest.FromString,
                    response_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsRequest.FromString,
                    response_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsResponse.SerializeToString,
            ),
            'StreamingRecognize': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRecognize,
                    request_deserializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeRequest.FromString,
                    response_serializer=cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.sentimo.v1.SentimoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SentimoService(object):
    """Service that implements the Cobalt Sentimo Speech Processing API.
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cobaltspeech.sentimo.v1.SentimoService/Version',
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionRequest.SerializeToString,
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.VersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cobaltspeech.sentimo.v1.SentimoService/ListModels',
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsRequest.SerializeToString,
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamingRecognize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/cobaltspeech.sentimo.v1.SentimoService/StreamingRecognize',
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeRequest.SerializeToString,
            cobaltspeech_dot_sentimo_dot_v1_dot_sentimo__pb2.StreamingRecognizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
